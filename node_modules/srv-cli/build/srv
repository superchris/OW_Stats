#!/usr/bin/env node
'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _dotenv = require('dotenv');

var _dotenv2 = _interopRequireDefault(_dotenv);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _updateNotifier = require('update-notifier');

var _updateNotifier2 = _interopRequireDefault(_updateNotifier);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _default = require('./default.json');

var _default2 = _interopRequireDefault(_default);

var _path = require('path');

var _index = require('./cmd/index');

var cmd = _interopRequireWildcard(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint no-console:0 import/no-unresolved:0 */

(0, _updateNotifier2.default)({ pkg: _package2.default }).notify();

// Banner.
var banner = '\n\u25BC ' + _package2.default.name + ' - v' + _package2.default.version + '\n' + _package2.default.homepage + '\n';
console.log(_chalk2.default.cyan(banner));

// Load dotenv.
_dotenv2.default.config({ silent: true });

// Parse CLI args.
_commander2.default.version(_package2.default.version).usage('entrypoint.js [options]').option('-p, --port [n]', 'Port to listen on', process.env.PORT).option('-H, --host [value]', 'Host to listen on', process.env.HOST).option('-D, --docs [value]', 'Generate Docs from folder', _default2.default.docs.folder).option('-L, --lint', 'Lint code with ESLint').option('-n, --no-babel', 'Skip Babel transformation').option('-C, --config [value]', 'Configuration file').parse(process.argv);

// Parse entrypoint file.
var file = _commander2.default.args.pop();
if (!file) {
  try {
    var packageJson = require((0, _path.resolve)( // eslint-disable-line global-require
    process.cwd(), 'package.json'));
    file = packageJson.main;
  } catch (e) {
    console.error(_chalk2.default.red(e));
    process.exit(1);
  }
}

if (!file) {
  console.error(_chalk2.default.red('Error! Please supply a file.'));
  process.exit(1);
}

if (file[0] !== '/') {
  file = (0, _path.resolve)(process.cwd(), file);
}

// Update config object if custom config file is provided.
if (_commander2.default.config) {
  try {
    // Load external config file.
    var customConfig = require((0, _path.resolve)( // eslint-disable-line global-require
    process.cwd(), _commander2.default.config));

    // Extend config object.
    (0, _assign2.default)(_default2.default, customConfig);

    console.log(_chalk2.default.blue('▼ Loading configuration: '), _chalk2.default.white(_commander2.default.config));
  } catch (err) {
    console.error(_chalk2.default.red(err));
    process.exit(1);
  }
}

// Skip babel transpilation if flag set.
if (!_commander2.default.noBabel) {
  try {
    cmd.transpile();
    console.log(_chalk2.default.blue('▼ Babel transpiled. Preset: ES2015'));
  } catch (err) {
    console.error(_chalk2.default.red(err));
    process.exit(1);
  }
}

// Generate docs flag.
if (_commander2.default.docs) {
  try {
    cmd.docs(_commander2.default.docs, _default2.default.docs);
    console.log(_chalk2.default.blue('▼ Docs generated.'), _chalk2.default.white('http://' + _default2.default.app.host + ':' + _default2.default.app.port + '/docs'));
  } catch (err) {
    console.error(_chalk2.default.red(err));
    process.exit(1);
  }
}

if (_commander2.default.lint) {
  try {
    console.log(_chalk2.default.blue('▼ Linting code.'));
    cmd.lint(_default2.default.lint);
  } catch (err) {
    console.error(_chalk2.default.red(err));
    process.exit(1);
  }
}

// Host and port flags take precedence.
_default2.default.app.host = _commander2.default.host || _default2.default.app.host;
_default2.default.app.port = _commander2.default.port || _default2.default.app.port;

// Start server.
cmd.server(file, _default2.default, function (err) {
  if (err) {
    console.error(_chalk2.default.red(err));
  }
  var _config$app = _default2.default.app,
      host = _config$app.host,
      port = _config$app.port;

  console.log(_chalk2.default.green('▼ Ready! Listening on:', _chalk2.default.white('http://' + host + ':' + port)));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNydi5qcyJdLCJuYW1lcyI6WyJjbWQiLCJwa2ciLCJub3RpZnkiLCJiYW5uZXIiLCJuYW1lIiwidmVyc2lvbiIsImhvbWVwYWdlIiwiY29uc29sZSIsImxvZyIsImN5YW4iLCJjb25maWciLCJzaWxlbnQiLCJ1c2FnZSIsIm9wdGlvbiIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwiSE9TVCIsImRvY3MiLCJmb2xkZXIiLCJwYXJzZSIsImFyZ3YiLCJmaWxlIiwiYXJncyIsInBvcCIsInBhY2thZ2VKc29uIiwicmVxdWlyZSIsImN3ZCIsIm1haW4iLCJlIiwiZXJyb3IiLCJyZWQiLCJleGl0IiwiY3VzdG9tQ29uZmlnIiwiYmx1ZSIsIndoaXRlIiwiZXJyIiwibm9CYWJlbCIsInRyYW5zcGlsZSIsImFwcCIsImhvc3QiLCJwb3J0IiwibGludCIsInNlcnZlciIsImdyZWVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFFQTs7SUFBWUEsRzs7Ozs7O0FBVlo7O0FBWUEsOEJBQWUsRUFBRUMsc0JBQUYsRUFBZixFQUF3QkMsTUFBeEI7O0FBRUE7QUFDQSxJQUFNQyx1QkFDRixrQkFBSUMsSUFERixZQUNhLGtCQUFJQyxPQURqQixVQUVKLGtCQUFJQyxRQUZBLE9BQU47QUFJQUMsUUFBUUMsR0FBUixDQUFZLGdCQUFNQyxJQUFOLENBQVdOLE1BQVgsQ0FBWjs7QUFFQTtBQUNBLGlCQUFPTyxNQUFQLENBQWMsRUFBRUMsUUFBUSxJQUFWLEVBQWQ7O0FBRUE7QUFDQSxvQkFDR04sT0FESCxDQUNXLGtCQUFJQSxPQURmLEVBRUdPLEtBRkgsQ0FFUyx5QkFGVCxFQUdHQyxNQUhILENBR1UsZ0JBSFYsRUFHNEIsbUJBSDVCLEVBR2lEQyxRQUFRQyxHQUFSLENBQVlDLElBSDdELEVBSUdILE1BSkgsQ0FJVSxvQkFKVixFQUlnQyxtQkFKaEMsRUFJcURDLFFBQVFDLEdBQVIsQ0FB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STBDLElBQUosQ0FBUyxrQkFBT0EsSUFBaEI7QUFDRCxHQUhELENBR0UsT0FBT04sR0FBUCxFQUFZO0FBQ1o3QixZQUFRdUIsS0FBUixDQUFjLGdCQUFNQyxHQUFOLENBQVVLLEdBQVYsQ0FBZDtBQUNBdEIsWUFBUWtCLElBQVIsQ0FBYSxDQUFiO0FBQ0Q7QUFDRjs7QUFFRDtBQUNBLGtCQUFPTyxHQUFQLENBQVdDLElBQVgsR0FBa0Isb0JBQVFBLElBQVIsSUFBZ0Isa0JBQU9ELEdBQVAsQ0FBV0MsSUFBN0M7QUFDQSxrQkFBT0QsR0FBUCxDQUFXRSxJQUFYLEdBQWtCLG9CQUFRQSxJQUFSLElBQWdCLGtCQUFPRixHQUFQLENBQVdFLElBQTdDOztBQUVBO0FBQ0F6QyxJQUFJMkMsTUFBSixDQUFXckIsSUFBWCxxQkFBeUIsVUFBQ2MsR0FBRCxFQUFTO0FBQ2hDLE1BQUlBLEdBQUosRUFBUztBQUNQN0IsWUFBUXVCLEtBQVIsQ0FBYyxnQkFBTUMsR0FBTixDQUFVSyxHQUFWLENBQWQ7QUFDRDtBQUgrQixvQkFJVCxrQkFBT0csR0FKRTtBQUFBLE1BSXhCQyxJQUp3QixlQUl4QkEsSUFKd0I7QUFBQSxNQUlsQkMsSUFKa0IsZUFJbEJBLElBSmtCOztBQUtoQ2xDLFVBQVFDLEdBQVIsQ0FBWSxnQkFBTW9DLEtBQU4sQ0FBWSx3QkFBWixFQUFzQyxnQkFBTVQsS0FBTixhQUFzQkssSUFBdEIsU0FBOEJDLElBQTlCLENBQXRDLENBQVo7QUFDRCxDQU5EIiwiZmlsZSI6InNydi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuLyogZXNsaW50IG5vLWNvbnNvbGU6MCBpbXBvcnQvbm8tdW5yZXNvbHZlZDowICovXHJcblxyXG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XHJcbmltcG9ydCBwcm9ncmFtIGZyb20gJ2NvbW1hbmRlcic7XHJcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XHJcbmltcG9ydCB1cGRhdGVOb3RpZmllciBmcm9tICd1cGRhdGUtbm90aWZpZXInO1xyXG5pbXBvcnQgcGtnIGZyb20gJy4uL3BhY2thZ2UuanNvbic7XHJcbmltcG9ydCBjb25maWcgZnJvbSAnLi9kZWZhdWx0Lmpzb24nO1xyXG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAncGF0aCc7XHJcblxyXG5pbXBvcnQgKiBhcyBjbWQgZnJvbSAnLi9jbWQvaW5kZXgnO1xyXG5cclxudXBkYXRlTm90aWZpZXIoeyBwa2cgfSkubm90aWZ5KCk7XHJcblxyXG4vLyBCYW5uZXIuXHJcbmNvbnN0IGJhbm5lciA9IGBcclxu4pa8ICR7cGtnLm5hbWV9IC0gdiR7cGtnLnZlcnNpb259XHJcbiR7cGtnLmhvbWVwYWdlfVxyXG5gO1xyXG5jb25zb2xlLmxvZyhjaGFsay5jeWFuKGJhbm5lcikpO1xyXG5cclxuLy8gTG9hZCBkb3RlbnYuXHJcbmRvdGVudi5jb25maWcoeyBzaWxlbnQ6IHRydWUgfSk7XHJcblxyXG4vLyBQYXJzZSBDTEkgYXJncy5cclxucHJvZ3JhbVxyXG4gIC52ZXJzaW9uKHBrZy52ZXJzaW9uKVxyXG4gIC51c2FnZSgnZW50cnlwb2ludC5qcyBbb3B0aW9uc10nKVxyXG4gIC5vcHRpb24oJy1wLCAtLXBvcnQgW25dJywgJ1BvcnQgdG8gbGlzdGVuIG9uJywgcHJvY2Vzcy5lbnYuUE9SVClcclxuICAub3B0aW9uKCctSCwgLS1ob3N0IFt2YWx1ZV0nLCAnSG9zdCB0byBsaXN0ZW4gb24nLCBwcm9jZXNzLmVudi5IT1NUKVxyXG4gIC5vcHRpb24oJy1ELCAtLWRvY3MgW3ZhbHVlXScsICdHZW5lcmF0ZSBEb2NzIGZyb20gZm9sZGVyJywgY29uZmlnLmRvY3MuZm9sZGVyKVxyXG4gIC5vcHRpb24oJy1MLCAtLWxpbnQnLCAnTGludCBjb2RlIHdpdGggRVNMaW50JylcclxuICAub3B0aW9uKCctbiwgLS1uby1iYWJlbCcsICdTa2lwIEJhYmVsIHRyYW5zZm9ybWF0aW9uJylcclxuICAub3B0aW9uKCctQywgLS1jb25maWcgW3ZhbHVlXScsICdDb25maWd1cmF0aW9uIGZpbGUnKVxyXG4gIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xyXG5cclxuXHJcbi8vIFBhcnNlIGVudHJ5cG9pbnQgZmlsZS5cclxubGV0IGZpbGUgPSBwcm9ncmFtLmFyZ3MucG9wKCk7XHJcbmlmICghZmlsZSkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBwYWNrYWdlSnNvbiA9IHJlcXVpcmUocmVzb2x2ZSggIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcclxuICAgICAgcHJvY2Vzcy5jd2QoKSwgJ3BhY2thZ2UuanNvbicpKTtcclxuICAgIGZpbGUgPSBwYWNrYWdlSnNvbi5tYWluO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoY2hhbGsucmVkKGUpKTtcclxuICAgIHByb2Nlc3MuZXhpdCgxKTtcclxuICB9XHJcbn1cclxuXHJcbmlmICghZmlsZSkge1xyXG4gIGNvbnNvbGUuZXJyb3IoY2hhbGsucmVkKCdFcnJvciEgUGxlYXNlIHN1cHBseSBhIGZpbGUuJykpO1xyXG4gIHByb2Nlc3MuZXhpdCgxKTtcclxufVxyXG5cclxuaWYgKGZpbGVbMF0gIT09ICcvJykge1xyXG4gIGZpbGUgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIGZpbGUpO1xyXG59XHJcblxyXG4vLyBVcGRhdGUgY29uZmlnIG9iamVjdCBpZiBjdXN0b20gY29uZmlnIGZpbGUgaXMgcHJvdmlkZWQuXHJcbmlmIChwcm9ncmFtLmNvbmZpZykge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBMb2FkIGV4dGVybmFsIGNvbmZpZyBmaWxlLlxyXG4gICAgY29uc3QgY3VzdG9tQ29uZmlnID0gcmVxdWlyZShyZXNvbHZlKCAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnbG9iYWwtcmVxdWlyZVxyXG4gICAgICBwcm9jZXNzLmN3ZCgpLCBwcm9ncmFtLmNvbmZpZykpO1xyXG5cclxuICAgIC8vIEV4dGVuZCBjb25maWcgb2JqZWN0LlxyXG4gICAgT2JqZWN0LmFzc2lnbihjb25maWcsIGN1c3RvbUNvbmZpZyk7XHJcblxyXG4gICAgY29uc29sZS5sb2coY2hhbGsuYmx1ZSgn4pa8IExvYWRpbmcgY29uZmlndXJhdGlvbjogJyksIGNoYWxrLndoaXRlKHByb2dyYW0uY29uZmlnKSk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZChlcnIpKTtcclxuICAgIHByb2Nlc3MuZXhpdCgxKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIFNraXAgYmFiZWwgdHJhbnNwaWxhdGlvbiBpZiBmbGFnIHNldC5cclxuaWYgKCFwcm9ncmFtLm5vQmFiZWwpIHtcclxuICB0cnkge1xyXG4gICAgY21kLnRyYW5zcGlsZSgpO1xyXG4gICAgY29uc29sZS5sb2coY2hhbGsuYmx1ZSgn4pa8IEJhYmVsIHRyYW5zcGlsZWQuIFByZXNldDogRVMyMDE1JykpO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcihjaGFsay5yZWQoZXJyKSk7XHJcbiAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBHZW5lcmF0ZSBkb2NzIGZsYWcuXHJcbmlmIChwcm9ncmFtLmRvY3MpIHtcclxuICB0cnkge1xyXG4gICAgY21kLmRvY3MocHJvZ3JhbS5kb2NzLCBjb25maWcuZG9jcyk7XHJcbiAgICBjb25zb2xlLmxvZyhjaGFsay5ibHVlKCfilrwgRG9jcyBnZW5lcmF0ZWQuJyksIGNoYWxrLndoaXRlKGBodHRwOi8vJHtjb25maWcuYXBwLmhvc3R9OiR7Y29uZmlnLmFwcC5wb3J0fS9kb2NzYCkpO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcihjaGFsay5yZWQoZXJyKSk7XHJcbiAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgfVxyXG59XHJcblxyXG5pZiAocHJvZ3JhbS5saW50KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnNvbGUubG9nKGNoYWxrLmJsdWUoJ+KWvCBMaW50aW5nIGNvZGUuJykpO1xyXG4gICAgY21kLmxpbnQoY29uZmlnLmxpbnQpO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcihjaGFsay5yZWQoZXJyKSk7XHJcbiAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBIb3N0IGFuZCBwb3J0IGZsYWdzIHRha2UgcHJlY2VkZW5jZS5cclxuY29uZmlnLmFwcC5ob3N0ID0gcHJvZ3JhbS5ob3N0IHx8IGNvbmZpZy5hcHAuaG9zdDtcclxuY29uZmlnLmFwcC5wb3J0ID0gcHJvZ3JhbS5wb3J0IHx8IGNvbmZpZy5hcHAucG9ydDtcclxuXHJcbi8vIFN0YXJ0IHNlcnZlci5cclxuY21kLnNlcnZlcihmaWxlLCBjb25maWcsIChlcnIpID0+IHtcclxuICBpZiAoZXJyKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZChlcnIpKTtcclxuICB9XHJcbiAgY29uc3QgeyBob3N0LCBwb3J0IH0gPSBjb25maWcuYXBwO1xyXG4gIGNvbnNvbGUubG9nKGNoYWxrLmdyZWVuKCfilrwgUmVhZHkhIExpc3RlbmluZyBvbjonLCBjaGFsay53aGl0ZShgaHR0cDovLyR7aG9zdH06JHtwb3J0fWApKSk7XHJcbn0pO1xyXG4iXX0=